using Microsoft.EntityFrameworkCore;
using BOAPI.Models;

namespace BOAPI.Data
{
    public static class DataSeeder
    {
        public static void Initialize(IServiceProvider serviceProvider)
        {
            using var context = new BOContext(
                serviceProvider.GetRequiredService<DbContextOptions<BOContext>>());

            // ‚úÖ V√âRIFICATION GLOBALE - √âviter tout re-seeding si donn√©es existent
            if (context.CheckLists.Any())
            {
                Console.WriteLine("‚úÖ Base de donn√©es d√©j√† initialis√©e - skip du seeding");
                return;
            }

            try
            {
                Console.WriteLine("üîß D√©but de l'initialisation des donn√©es...");
                
                SeedCheckListSecuritePatient(context);
                SeedCheckListAnesthesie(context);
                SeedCheckListHygiene(context);
                SeedCheckListTransfusion(context);
                SeedCheckListRadioprotection(context);
                SeedCheckListLogistique(context);
                SeedPersonnel(context);
                
                Console.WriteLine("‚úÖ Seed des donn√©es termin√© avec succ√®s !");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Erreur lors du seed des donn√©es: {ex.Message}");
                throw;
            }
        }

        // ‚úÖ 1. CheckList S√©curit√© Patient - VERSION CORRIG√âE
     // ‚úÖ 1. CheckList S√©curit√© Patient - VERSION EXACTE DU PDF (CORRIG√âE)
public static void SeedCheckListSecuritePatient(BOContext context)
{
    if (context.CheckLists.Any(c => c.Libelle.Contains("S√âCURIT√â DU PATIENT"))) 
    {
        Console.WriteLine("‚úÖ Checklist S√©curit√© Patient d√©j√† existante");
        return;
    }

    Console.WriteLine("üîß Cr√©ation de la Checklist S√©curit√© Patient (version exacte PDF)...");

    var checkList = new CheckList
    {
        Libelle = "CHECK-LIST ¬´ S√âCURIT√â DU PATIENT AU BLOC OP√âRATOIRE ¬ª",
        Version = "2018",
        Description = "V√©rifier ensemble pour d√©cider",
        DateCreation = DateTime.UtcNow,
        EstActive = true,
        Etapes = new List<Etape>
        {
            new Etape
            {
                Nom = "AVANT INDUCTION ANESTH√âSIQUE - Temps de pause avant anesth√©sie",
                Ordre = 0,
                Questions = new List<Question>
                {
                    new Question { 
                        Texte = "L'identit√© du patient est correcte", 
                        Type = QuestionType.Boolean, 
                        EstObligatoire = true
                    },
                    new Question { 
                        Texte = "L'autorisation d'op√©rer est sign√©e par les parents ou le repr√©sentant l√©gal", 
                        Type = QuestionType.Boolean, 
                        EstObligatoire = true
                    },
                    new Question { 
                        Texte = "L'intervention et le site op√©ratoire sont confirm√©s : id√©alement par le patient et, dans tous les cas, par le dossier ou proc√©dure sp√©cifique - la documentation clinique et sans clinique n√©cessaire est disponible en salle", 
                        Type = QuestionType.Boolean, 
                        EstObligatoire = true
                    },
                    new Question { 
                        Texte = "Le mode d'installation est connu de l'√©quipe en salle, coh√©rent avec le site / l'intervention et non dangereux pour le patient", 
                        Type = QuestionType.Boolean, 
                        EstObligatoire = true
                    },
                    new Question { 
                        Texte = "La pr√©paration cutan√©e de l'op√©r√© est document√©e dans la fiche de liaison service / bloc op√©ratoire (ou autre proc√©dure en ≈ìuvre dans l'√©tablissement)", 
                        Type = QuestionType.Boolean, 
                        EstObligatoire = true
                    },
                    new Question { 
                        Texte = "L'√©quipement / le mat√©riel n√©cessaires pour l'intervention sont v√©rifi√©s et adapt√©s au poids et √† la taille du patient - pour la partie chirurgicale - pour la partie anesth√©sique", 
                        Type = QuestionType.Boolean, 
                        EstObligatoire = true
                    }
                }
            },
            new Etape
            {
                Nom = "AVANT INTERVENTION CHIRURGICALE - Temps de pause avant incision (appel√© aussi time-out)",
                Ordre = 1,
                Questions = new List<Question>
                {
                    new Question { 
                        Texte = "V√©rification ¬´ ultime ¬ª discut√©e au sein de l'√©quipe en pr√©sence des chirurgiens(s), anesth√©siste(s), IADE-BODEF/IDE - identit√© patient confirm√©e - intervention pr√©vue confirm√©e - site op√©ratoire confirm√© - installation correcte confirm√©e - documents n√©cessaires disponibles (notamment imagerie)", 
                        Type = QuestionType.Boolean, 
                        EstObligatoire = true
                    },
                    new Question { 
                        Texte = "Partage des informations essentielles oralement au sein de l'√©quipe sur les √©l√©ments √† risque / √©tapes critiques de l'intervention (time-out) - sur le plan chirurgical (temps op√©ratoire difficile, points sp√©cifiques de l'intervention, identifications des mat√©riels n√©cessaires, confirmation de leur op√©rationnalit√©, etc.) - sur le plan anesth√©sique (probl√®mes potentiels li√©s au monitorage, hypothermie, etc.)", 
                        Type = QuestionType.Boolean, 
                        EstObligatoire = true
                    }
                }
            },
            new Etape
            {
                Nom = "APR√àS INTERVENTION - Pause avant sortie de salle d'op√©ration",
                Ordre = 2,
                Questions = new List<Question>
                {
                    new Question { 
                        Texte = "Confirmation orale par le personnel aupr√®s de l'√©quipe : - de l'intervention enregistr√©e - du compte final correct - des compresses, aiguilles, instruments, etc. - de l'√©tiquetage des pr√©l√®vements, pi√®ces op√©ratoires, etc. - si des √©v√©nements ind√©sirables ou porteurs de risques sont survenus : ont-ils fait l'objet d'un signalement / d√©claration ?", 
                        Type = QuestionType.BooleanNA, 
                        EstObligatoire = true
                    },
                    new Question { 
                        Texte = "Les prescriptions et la surveillance post-op√©ratoires (y compris les seuils d'alerte sp√©cifiques) sont faites compl√®tement par l'√©quipe chirurgicale et anesth√©sique et adapt√©es √† l'√¢ge, au poids et √† la taille du patient", 
                        Type = QuestionType.Boolean, 
                        EstObligatoire = true
                    }
                }
            },
            new Etape
            {
                Nom = "D√âCISION FINALE",
                Ordre = 3,
                Questions = new List<Question>
                {
                    new Question { 
                        Texte = "GO = Intervention valid√©e", 
                        Type = QuestionType.Boolean, 
                        EstObligatoire = true
                    },
                    new Question { 
                        Texte = "NO GO = Intervention non valid√©e", 
                        Type = QuestionType.Boolean, 
                        EstObligatoire = true
                    },
                    new Question { 
                        Texte = "Cons√©quence sur l'intervention : Retard ou Annulation", 
                        Type = QuestionType.Boolean,  // ‚úÖ CORRIG√â : Boolean au lieu de Text
                        EstObligatoire = false
                    }
                }
            }
        }
    };

    context.CheckLists.Add(checkList);
    context.SaveChanges();
    Console.WriteLine("‚úÖ Checklist S√©curit√© Patient cr√©√©e (correspondance exacte PDF)");
}

// ‚úÖ 2. CheckList Anesth√©sie - VERSION EXACTE DU PDF
public static void SeedCheckListAnesthesie(BOContext context)
{
    if (context.CheckLists.Any(c => c.Libelle.Contains("ANESTH√âSIE"))) 
    {
        Console.WriteLine("‚úÖ Checklist Anesth√©sie d√©j√† existante");
        return;
    }

    Console.WriteLine("üîß Cr√©ation de la Checklist Anesth√©sie (version exacte PDF)...");

    var checkList = new CheckList
    {
        Libelle = "CHECK-LIST ¬´ S√âCURIT√â ANESTH√âSIQUE ¬ª",
        Version = "2024",
        Description = "V√©rifier pour anesth√©sier en s√©curit√©",
        DateCreation = DateTime.UtcNow,
        EstActive = true,
        Etapes = new List<Etape>
        {
            new Etape
            {
                Nom = "BILAN PR√â-ANESTH√âSIQUE",
                Ordre = 0,
                Questions = new List<Question>
                {
                    new Question { 
                        Texte = "Consultation d'anesth√©sie r√©alis√©e et conforme", 
                        Type = QuestionType.Boolean, 
                        EstObligatoire = true
                    },
                    new Question { 
                        Texte = "Bilan biologique √† jour et conforme", 
                        Type = QuestionType.Boolean, 
                        EstObligatoire = true
                    },
                    new Question { 
                        Texte = "Je√ªne pr√©-op√©ratoire respect√©", 
                        Type = QuestionType.Boolean, 
                        EstObligatoire = true
                    },
                    new Question { 
                        Texte = "Allergies connues et document√©es", 
                        Type = QuestionType.Boolean, 
                        EstObligatoire = true
                    }
                }
            },
            new Etape
            {
                Nom = "V√âRIFICATION DU MAT√âRIEL",
                Ordre = 1,
                Questions = new List<Question>
                {
                    new Question { 
                        Texte = "Mat√©riel d'intubation v√©rifi√© et fonctionnel", 
                        Type = QuestionType.Boolean, 
                        EstObligatoire = true
                    },
                    new Question { 
                        Texte = "M√©dicaments d'anesth√©sie pr√©par√©s et √©tiquet√©s", 
                        Type = QuestionType.Boolean, 
                        EstObligatoire = true
                    },
                    new Question { 
                        Texte = "Voies veineuses p√©riph√©riques v√©rifi√©es", 
                        Type = QuestionType.Boolean, 
                        EstObligatoire = true
                    },
                    new Question { 
                        Texte = "Monitorage standard connect√© et fonctionnel", 
                        Type = QuestionType.Boolean, 
                        EstObligatoire = true
                    }
                }
            },
            new Etape
            {
                Nom = "D√âCISION FINALE",
                Ordre = 2,
                Questions = new List<Question>
                {
                    new Question { 
                        Texte = "GO = Intervention valid√©e", 
                        Type = QuestionType.Boolean, 
                        EstObligatoire = true
                    },
                    new Question { 
                        Texte = "NO GO = Intervention non valid√©e", 
                        Type = QuestionType.Boolean, 
                        EstObligatoire = true
                    },
                    new Question { 
                        Texte = "Cons√©quence sur l'intervention : Retard ou Annulation", 
                        Type = QuestionType.Boolean, 
                        EstObligatoire = false
                    }
                }
            }
        }
    };

    context.CheckLists.Add(checkList);
    context.SaveChanges();
    Console.WriteLine("‚úÖ Checklist Anesth√©sie cr√©√©e (correspondance exacte PDF)");
}

        // ‚úÖ 3. CheckList Hygi√®ne
        public static void SeedCheckListHygiene(BOContext context)
        {
            if (context.CheckLists.Any(c => c.Libelle.Contains("HYGI√àNE"))) 
            {
                Console.WriteLine("‚úÖ Checklist Hygi√®ne d√©j√† existante");
                return;
            }

            Console.WriteLine("üîß Cr√©ation de la Checklist Hygi√®ne...");

            var checkList = new CheckList
            {
                Libelle = "CHECK-LIST ¬´ HYGI√àNE & ASEPSIE ¬ª",
                Version = "2018",
                Description = "Pr√©vention des infections au bloc",
                DateCreation = DateTime.UtcNow,
                EstActive = true,
                Etapes = new List<Etape>
                {
                    new Etape
                    {
                        Nom = "AVANT L'INTERVENTION",
                        Ordre = 0,
                        Questions = new List<Question>
                        {
                            new Question { Texte = "Lavage chirurgical effectu√© ?", Type = QuestionType.Boolean, EstObligatoire = true },
                            new Question { Texte = "Tenue et gants st√©riles port√©s ?", Type = QuestionType.Boolean, EstObligatoire = true },
                            new Question { Texte = "St√©rilisation du mat√©riel v√©rifi√©e ?", Type = QuestionType.Boolean, EstObligatoire = true }
                        }
                    }
                }
            };

            context.CheckLists.Add(checkList);
            context.SaveChanges();
            Console.WriteLine("‚úÖ Checklist Hygi√®ne cr√©√©e avec succ√®s");
        }

        // ‚úÖ 4. CheckList Transfusion
        public static void SeedCheckListTransfusion(BOContext context)
        {
            if (context.CheckLists.Any(c => c.Libelle.Contains("TRANSFUSION"))) 
            {
                Console.WriteLine("‚úÖ Checklist Transfusion d√©j√† existante");
                return;
            }

            Console.WriteLine("üîß Cr√©ation de la Checklist Transfusion...");

            var checkList = new CheckList
            {
                Libelle = "CHECK-LIST ¬´ TRANSFUSION ¬ª",
                Version = "2018",
                Description = "S√©curit√© transfusionnelle",
                DateCreation = DateTime.UtcNow,
                EstActive = true,
                Etapes = new List<Etape>
                {
                    new Etape
                    {
                        Nom = "V√âRIFICATION AVANT TRANSFUSION",
                        Ordre = 0,
                        Questions = new List<Question>
                        {
                            new Question { Texte = "Identit√© patient confirm√©e ?", Type = QuestionType.Boolean, EstObligatoire = true },
                            new Question { Texte = "Concordance du groupe sanguin v√©rifi√©e ?", Type = QuestionType.Boolean, EstObligatoire = true },
                            new Question { Texte = "Compatibilit√© crois√©e effectu√©e ?", Type = QuestionType.Boolean, EstObligatoire = true }
                        }
                    }
                }
            };

            context.CheckLists.Add(checkList);
            context.SaveChanges();
            Console.WriteLine("‚úÖ Checklist Transfusion cr√©√©e avec succ√®s");
        }

        // ‚úÖ 5. CheckList Radioprotection
        public static void SeedCheckListRadioprotection(BOContext context)
        {
            if (context.CheckLists.Any(c => c.Libelle.Contains("RADIOPROTECTION"))) 
            {
                Console.WriteLine("‚úÖ Checklist Radioprotection d√©j√† existante");
                return;
            }

            Console.WriteLine("üîß Cr√©ation de la Checklist Radioprotection...");

            var checkList = new CheckList
            {
                Libelle = "CHECK-LIST ¬´ RADIOPROTECTION ¬ª",
                Version = "2018",
                Description = "Protection contre l'irradiation",
                DateCreation = DateTime.UtcNow,
                EstActive = true,
                Etapes = new List<Etape>
                {
                    new Etape
                    {
                        Nom = "V√âRIFICATION AVANT EXPOSITION",
                        Ordre = 0,
                        Questions = new List<Question>
                        {
                            new Question { Texte = "√âquipements plomb√©s port√©s ?", Type = QuestionType.Boolean, EstObligatoire = true },
                            new Question { Texte = "Dosim√®tres port√©s ?", Type = QuestionType.Boolean, EstObligatoire = true },
                            new Question { Texte = "Signalisation de la radioscopie activ√©e ?", Type = QuestionType.Boolean, EstObligatoire = true }
                        }
                    }
                }
            };

            context.CheckLists.Add(checkList);
            context.SaveChanges();
            Console.WriteLine("‚úÖ Checklist Radioprotection cr√©√©e avec succ√®s");
        }

        // ‚úÖ 6. CheckList Logistique
        public static void SeedCheckListLogistique(BOContext context)
        {
            if (context.CheckLists.Any(c => c.Libelle.Contains("LOGISTIQUE"))) 
            {
                Console.WriteLine("‚úÖ Checklist Logistique d√©j√† existante");
                return;
            }

            Console.WriteLine("üîß Cr√©ation de la Checklist Logistique...");

            var checkList = new CheckList
            {
                Libelle = "CHECK-LIST ¬´ LOGISTIQUE & MAT√âRIEL ¬ª",
                Version = "2018",
                Description = "Disponibilit√© et fonctionnement du mat√©riel",
                DateCreation = DateTime.UtcNow,
                EstActive = true,
                Etapes = new List<Etape>
                {
                    new Etape
                    {
                        Nom = "V√âRIFICATION MAT√âRIEL",
                        Ordre = 0,
                        Questions = new List<Question>
                        {
                            new Question { Texte = "Aspiration fonctionnelle ?", Type = QuestionType.Boolean, EstObligatoire = true },
                            new Question { Texte = "Bistouri √©lectrique test√© ?", Type = QuestionType.Boolean, EstObligatoire = true },
                            new Question { Texte = "Lampe scialytique fonctionnelle ?", Type = QuestionType.Boolean, EstObligatoire = true }
                        }
                    }
                }
            };

            context.CheckLists.Add(checkList);
            context.SaveChanges();
            Console.WriteLine("‚úÖ Checklist Logistique cr√©√©e avec succ√®s");
        }

        // ‚úÖ Seed Personnel
        public static void SeedPersonnel(BOContext context)
        {
            if (context.Personnels.Any())
            {
                Console.WriteLine("‚úÖ Personnel d√©j√† existant");
                return;
            }

            Console.WriteLine("üîß Cr√©ation du Personnel...");

            var personnels = new List<Personnel>
            {
                new Personnel { Nom = "DUPONT", Prenom = "Jean", Role = "Chirurgien", Matricule = "CHIR001" },
                new Personnel { Nom = "MARTIN", Prenom = "Marie", Role = "Anesth√©siste", Matricule = "ANES001" },
                new Personnel { Nom = "BERNARD", Prenom = "Pierre", Role = "Infirmier", Matricule = "INF001" },
                new Personnel { Nom = "DUBOIS", Prenom = "Sophie", Role = "IADE", Matricule = "IADE001" }
            };

            context.Personnels.AddRange(personnels);
            context.SaveChanges();
            Console.WriteLine("‚úÖ Personnel cr√©√© avec succ√®s");
        }
    }
}